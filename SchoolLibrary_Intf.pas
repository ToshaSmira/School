unit SchoolLibrary_Intf;

// ----------------------------------------------------------------------
//  This file was automatically generated by Remoting SDK from a
//  RODL file downloaded from a server or associated with this project.
//
//  Do not modify this file manually, or your changes will be lost when
//  it is regenerated the next time you update your RODL.
// ----------------------------------------------------------------------

{$I RemObjects.inc}

interface

uses
  {$IFDEF DELPHIXE2UP}System.SysUtils{$ELSE}SysUtils{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.Classes{$ELSE}Classes{$ENDIF},
  {$IFDEF DELPHIXE2UP}System.TypInfo{$ELSE}TypInfo{$ENDIF},
  uROUri,
  uROProxy,
  uROExceptions,
  uROXMLIntf,
  uROClasses,
  uROTypes,
  uROClientIntf,
  uROAsync,
  uROEventReceiver;

const LibraryUID = '{D8ADC254-CD2D-4D5D-842B-FACD2B8C4169}';
const DefaultNamespace = 'SchoolLibrary';
const TargetNamespace = 'SchoolLibrary';
const ISchoolService_IID: TGUID = '{AE5CE650-28F8-4964-B230-6346F14B0188}';
type
  { Forward declarations }
  ISchoolService = interface;
  ISchoolService_Async = interface;
  ISchoolService_AsyncEx = interface;
  CoSchoolService = class;
  CoSchoolService_Async = class;
  CoSchoolService_AsyncEx = class;
  TSchoolService_Proxy = class;
  TSchoolService_AsyncProxy = class;
  TSchoolService_AsyncProxyEx = class;

  ISchoolService = interface(IROService)
  ['{ae5ce650-28f8-4964-b230-6346f14b0188}']
    function GetNameServer: AnsiString;
    function GetDateTimeServer: DateTime;
  end;

  ISchoolService_Async = interface(IROAsyncInterface)
  ['{405f4d58-3da1-4f2d-9959-3006a9e8537e}']
    procedure Invoke_GetNameServer;
    procedure Invoke_GetDateTimeServer;
    function Retrieve_GetNameServer: AnsiString;
    function Retrieve_GetDateTimeServer: DateTime;
  end;

  ISchoolService_AsyncEx = interface(IROAsyncInterfaceEx)
  ['{61cc909f-fab6-4c41-a13c-5ff8c7ce2dc6}']
    function BeginGetNameServer(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetDateTimeServer(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndGetNameServer(const aRequest: IROAsyncRequest): AnsiString;
    function EndGetDateTimeServer(const aRequest: IROAsyncRequest): DateTime;
  end;

  CoSchoolService = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISchoolService; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ISchoolService; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): ISchoolService; overload;
  end;

  CoSchoolService_Async = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISchoolService_Async; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ISchoolService_Async; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): ISchoolService_Async; overload;
  end;

  CoSchoolService_AsyncEx = class(System.TObject)
  public
    class function Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISchoolService_AsyncEx; overload;
    class function Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ISchoolService_AsyncEx; overload;
    class function Create(const aUrl: String; aDefaultNamespaces: String = ''): ISchoolService_AsyncEx; overload;
  end;

  TSchoolService_Proxy = class(TROProxy, ISchoolService)
  protected
    function __GetInterfaceName: String; override;
    function GetNameServer: AnsiString;
    function GetDateTimeServer: DateTime;
  end;

  TSchoolService_AsyncProxy = class(TROAsyncProxy, ISchoolService_Async)
  protected
    function __GetInterfaceName: String; override;
    procedure Invoke_GetNameServer;
    procedure Invoke_GetDateTimeServer;
    function Retrieve_GetNameServer: AnsiString;
    function Retrieve_GetDateTimeServer: DateTime;
  end;

  TSchoolService_AsyncProxyEx = class(TROAsyncProxyEx, ISchoolService_AsyncEx)
  protected
    function __GetInterfaceName: String; override;
    function BeginGetNameServer(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function BeginGetDateTimeServer(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
    function EndGetNameServer(const aRequest: IROAsyncRequest): AnsiString;
    function EndGetDateTimeServer(const aRequest: IROAsyncRequest): DateTime;
  end;

function DefaultNamespaces: String;
implementation

uses
  uROSerializer,
  uROClient,
  uROTransportChannel,
  uRORes;

function DefaultNamespaces: String;
var
  lres: String;
begin
  lres := DefaultNamespace;
  ;
  result := lres;
  exit;
end;

type
  { Forward declarations }
  TMyTransportChannel = class;

  TMyTransportChannel = class(TROTransportChannel)
  end;

class function CoSchoolService.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISchoolService;
begin
  result := TSchoolService_Proxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoSchoolService.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ISchoolService;
begin
  result := TSchoolService_Proxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoSchoolService.Create(const aUrl: String; aDefaultNamespaces: String = ''): ISchoolService;
begin
  result := TSchoolService_Proxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoSchoolService_Async.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISchoolService_Async;
begin
  result := TSchoolService_AsyncProxy.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoSchoolService_Async.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ISchoolService_Async;
begin
  result := TSchoolService_AsyncProxy.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoSchoolService_Async.Create(const aUrl: String; aDefaultNamespaces: String = ''): ISchoolService_Async;
begin
  result := TSchoolService_AsyncProxy.Create(aUrl, aDefaultNamespaces);
  exit;
end;

class function CoSchoolService_AsyncEx.Create(const aMessage: IROMessage; aTransportChannel: IROTransportChannel): ISchoolService_AsyncEx;
begin
  result := TSchoolService_AsyncProxyEx.Create(aMessage, aTransportChannel);
  exit;
end;

class function CoSchoolService_AsyncEx.Create(const aUri: TROUri; aDefaultNamespaces: String = ''): ISchoolService_AsyncEx;
begin
  result := TSchoolService_AsyncProxyEx.Create(aUri, aDefaultNamespaces);
  exit;
end;

class function CoSchoolService_AsyncEx.Create(const aUrl: String; aDefaultNamespaces: String = ''): ISchoolService_AsyncEx;
begin
  result := TSchoolService_AsyncProxyEx.Create(aUrl, aDefaultNamespaces);
  exit;
end;

function TSchoolService_Proxy.__GetInterfaceName: String;
begin
  result := 'SchoolService';
  exit;
end;

function TSchoolService_Proxy.GetNameServer: AnsiString;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: AnsiString;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'SchoolLibrary', __InterfaceName, 'GetNameServer');
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(AnsiString), lResult, []);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TSchoolService_Proxy.GetDateTimeServer: DateTime;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: DateTime;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'SchoolLibrary', __InterfaceName, 'GetDateTimeServer');
    lMessage.Finalize();

    lTransportChannel.Dispatch(lMessage);

    lMessage.Read('Result', System.TypeInfo(DateTime), lResult, [paIsDateTime]);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage.FreeStream();
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TSchoolService_AsyncProxy.__GetInterfaceName: String;
begin
  result := 'SchoolService';
  exit;
end;

procedure TSchoolService_AsyncProxy.Invoke_GetNameServer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetNameServer');

    lMessage.InitializeRequestMessage(lTransportChannel, 'SchoolLibrary', __InterfaceName, 'GetNameServer');
    __DispatchAsyncRequest('GetNameServer', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

procedure TSchoolService_AsyncProxy.Invoke_GetDateTimeServer;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    __AssertProxyNotBusy('GetDateTimeServer');

    lMessage.InitializeRequestMessage(lTransportChannel, 'SchoolLibrary', __InterfaceName, 'GetDateTimeServer');
    __DispatchAsyncRequest('GetDateTimeServer', lMessage);
  finally
    lMessage.UnsetAttributes(lTransportChannel);
    lMessage := nil;
    lTransportChannel := nil;
  end;
end;

function TSchoolService_AsyncProxy.Retrieve_GetNameServer: AnsiString;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: AnsiString;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetNameServer');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(AnsiString), lResult, []);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TSchoolService_AsyncProxy.Retrieve_GetDateTimeServer: DateTime;
var
  __response: TStream;
  tc: TMyTransportChannel;
  lRetry: Boolean;
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lFreeStream: Boolean;
  lResult: DateTime;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  lFreeStream := false;
  try
    __response := __RetrieveAsyncResponse('GetDateTimeServer');
    try
      try
        try
          lMessage.ReadFromStream(__response, lFreeStream);
        except
          on E: Exception do begin
            lFreeStream := true;
            raise;
          end;
        end;

        lMessage.Read('Result', System.TypeInfo(DateTime), lResult, [paIsDateTime]);
      except
        on E: EROSessionNotFound do begin
          tc := TMyTransportChannel(lTransportChannel.GetTransportObject());
          lRetry := false;
          tc.DoLoginNeeded(lMessage, E, lRetry);
          if not lRetry then begin
            raise;
          end;
        end;
        on E: Exception do begin
          raise;
        end;
      end;
    finally
      if lFreeStream then begin
        __response.Free();
      end;
    end;
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TSchoolService_AsyncProxyEx.__GetInterfaceName: String;
begin
  result := 'SchoolService';
  exit;
end;

function TSchoolService_AsyncProxyEx.BeginGetNameServer(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'SchoolLibrary', __InterfaceName, 'GetNameServer');
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TSchoolService_AsyncProxyEx.BeginGetDateTimeServer(const aCallback: TROAsyncCallback; const aUserData: Pointer = nil): IROAsyncRequest;
var
  lMessage: IROMessage;
  lTransportChannel: IROTransportChannel;
  lResult: IROAsyncRequest;
begin
  lMessage := __GetMessage();
  lMessage.SetAutoGeneratedNamespaces(DefaultNamespaces());
  lTransportChannel := __TransportChannel;
  try
    lMessage.InitializeRequestMessage(lTransportChannel, 'SchoolLibrary', __InterfaceName, 'GetDateTimeServer');
    lResult := __DispatchAsyncRequest(lMessage, aCallback, aUserData);
  finally
    lMessage := nil;
    lTransportChannel := nil;
  end;
  result := lResult;
  exit;
end;

function TSchoolService_AsyncProxyEx.EndGetNameServer(const aRequest: IROAsyncRequest): AnsiString;
var
  lResult: AnsiString;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(AnsiString), lResult, []);
  result := lResult;
  exit;
end;

function TSchoolService_AsyncProxyEx.EndGetDateTimeServer(const aRequest: IROAsyncRequest): DateTime;
var
  lResult: DateTime;
begin
  aRequest.ReadResponse();
  aRequest.Message.SetAutoGeneratedNamespaces(DefaultNamespaces());
  aRequest.Message.Read('Result', System.TypeInfo(DateTime), lResult, [paIsDateTime]);
  result := lResult;
  exit;
end;

initialization
  RegisterProxyClass(ISchoolService_IID, TSchoolService_Proxy);
finalization
  UnregisterProxyClass(ISchoolService_IID);
end.

